h1. Nexus Quickstart Guide

For now, you can run Nexus in Linux or Solaris. Those who develop on OS X are currently using a Linux virtual machine for development.

h2. Configure Nexus settings (NOT IMPLEMENTED)

# The pre-release alpha version Nexus does not currently use configuration files beyond the customary UNIX  configure/make process, but we plan on adding this, where one can specify things such as:
## log file locations
## specify pluggable components (such as allocation module, isolation module, etc.)

h2. Prerequisites

* Python 2.6 (Web UI uses python bottle package)
* g++
* (Not built or tested on Windows)

h2. Getting Nexus

See the non-public alpha release of nexus at http://nexus.berkeley.edu/git where you can can download a tarball

h2. Building Nexus

# In linux or solaris (OS X not currently supported), in the `NEXUS_HOME` directory, if you are using a 64bit ubuntu VM, type `./configure.OURS.ubuntu64`
## our premade config commands require you to have python-dev, ruby-dev, sun-java6-jdk, and swig (to get these in ubuntu, type apt-get X, where X is those three things in turn)
# Type `make`

h2. Running the Master

#  type `./nexus-master`. See the sample output below. 
# take note of the libprocess PID identifier that is printed to stdout (or the log file if you have redirected log output), it will be something like: `1@127.0.1.1:41210`
# access the webui at `http://[ip addr of master]:8080`

pre. ubuntu:~/nexus/src$ ./nexus-master 
I1229 15:50:36.042454 27343 master_main.cpp:51] Build: 2009-12-29 15:35:23 by andyk
I1229 15:50:36.043526 27343 master_main.cpp:52] Starting Nexus master
I1229 15:50:36.044958 27344 master.cpp:228] Master started at 1@127.0.1.1:41210
I1229 15:50:36.045361 27343 master_webui.cpp:42] Starting master web UI
I1229 15:50:36.046046 27346 master_webui.cpp:25] Web UI thread started
I1229 15:50:36.105986 27346 master_webui.cpp:32] Loading webui/master/webui.py
Bottle server starting up (using WSGIRefServer (0.0.0.0:8080))...
Listening on http://0.0.0.0:8080/
Use Ctrl-C to quit.
I1229 15:50:37.050211 27344 master.cpp:527] Allocator timer tick
I1229 15:50:37.050480 27344 simple_allocator.cpp:148] Running makeNewOffers...
I1229 15:50:38.059840 27344 master.cpp:527] Allocator timer tick
...

h2. Running the Slave

# type `./nexus-slave` without arguments to see the required and optional arguments
# You should be able to see the slave show up on the master's webui

h2. Start a Framework

# There should be a readme in each framework directory that explains how to use that framework
# You will have to have run `./configure` with the correct parameters to use frameworks written in languages other than C/C++, e.g. --with-java-home=...
## See the "README.swig":https://github.com/nexusproject/nexus/blob/master/README.swig file for more information about this

Example:

pre. ./test-framework 1@127.0.1.1:53511
./test-framework local  #A framework can also be run without a dedicated master
                        #by passing it the "local" flag instead of the master PID

h2. Logging Information

 * Nexus uses "Google Log":http://code.google.com/p/google-glog and writes logs to /tmp by default
 * Nexus also writes the stdout for master and slave to the NEXUS_HOME/work directory

h2. Unit Tests

Nexus uses "GoogleTest":http://code.google.com/p/googletest/. The tests are located in src/tests. They get built into a binary called alltests, which you can run to execute them. You can also run alltests -v to see log output on stderr (normally it only gets placed in a log file in /tmp)