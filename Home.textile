Mesos is a _"cluster operating system"_ that manages cluster resources and efficiently shares them among multiple distributed applications, or _frameworks_. The current implementation supports "Hadoop"http://hadoop.apache.org, "MPI":http://www.mcs.anl.gov/research/projects/mpich2/, and "Spark":http://github.com/mesos/spark (a new MapReduce-like framework from the Mesos team with support for low-latency interactive use and iterative jobs). Mesos can also be used as a platform upon which to build new cluster computing frameworks, with the powerful advantage that your frameworks will be able to share resources with Hadoop, MPI, etc and can therefore easily be adopted by those communities.

You can use Mesos in several ways:
* To run Hadoop, MPI, Spark and other applications on a shared pool of machines.
* To run multiple instances of Hadoop on the same cluster -- say separate instances for production and experimental jobs -- or even multiple versions of Hadoop (to test out a new version).
* To build new cluster applications without having to reinvent low-level facilities for farming out tasks to different nodes, monitoring them, etc.

This guide explains how to set up and test Mesos, and links to further documentation on other topics.

h1. Prerequisites

Mesos currently runs on Linux or Mac OS X, and has previously been tested on OpenSolaris. You will need the following packages to run it:

* g++ 4.1 or higher
* SWIG 1.3.40 or higher
* Python 2.6 (for the Mesos web UI)
* Java 1.6 or higher (to run Java frameworks including Hadoop and "Spark":http://github.com/mesos/spark)

h1. Getting Mesos

You can download the alpha release of Mesos from GitHub at http://github.com/mesos/mesos.git.

h1. Building Mesos

Mesos uses the standard GNU build tools. You should configure it using the @configure@ script in the root directory. This script accepts the following arguments to enable various options:
* @--with-python-headers=DIR@: Find Python header files in @DIR@ (to turn on Python support). Recommended.
* @--with-webui@: Enable the Mesos web UI (which requires Python 2.6). Recommended.
* @--with-java-home=DIR@: Enable Java framework support with a given installation of Java. Required for Hadoop and Spark.
* @--with-zookeeper=DIR@ or @--with-included-zookeeper@: Enable master fault-tolerance using either an existing ZooKeeper installation or the version of ZooKeeper bundled with Mesos. For more help, see [[using ZooKeeper]].

The Git repository contains sample configure scripts for Mac OS X and several recent Linux distributions, with the correct paths for each platform. These still assume that you have installed the correct packages (e.g. @python-dev@ and the JDK on Linux).

h1. Testing the build

After you build Mesos, you can run its unit tests using the @alltests@ program located in @src@. Note that a few tests for specific platforms are disabled by default. You can run @alltests@ with @--help@ for help about its options.

You can also set up a small Mesos cluster as follows:

h2. Running the Master


h3. Fault Tolerant Mesos (using Zookeeper)
# Make sure Zookeeper is running
# 

h4. Non Fault-Tolerant Mesos
#  type `./mesos-master`. See the sample output below. 
# take note of the libprocess PID identifier that is printed to stdout (or the log file if you have redirected log output), it will be something like: `1@127.0.1.1:41210`
# access the webui at `http://[ip addr of master]:8080`

pre. ubuntu:~/mesos/src$ ./mesos-master 
I1229 15:50:36.042454 27343 master_main.cpp:51] Build: 2009-12-29 15:35:23 by andyk
I1229 15:50:36.043526 27343 master_main.cpp:52] Starting Mesos master
I1229 15:50:36.044958 27344 master.cpp:228] Master started at 1@127.0.1.1:41210
I1229 15:50:36.045361 27343 master_webui.cpp:42] Starting master web UI
I1229 15:50:36.046046 27346 master_webui.cpp:25] Web UI thread started
I1229 15:50:36.105986 27346 master_webui.cpp:32] Loading webui/master/webui.py
Bottle server starting up (using WSGIRefServer (0.0.0.0:8080))...
Listening on http://0.0.0.0:8080/
Use Ctrl-C to quit.
I1229 15:50:37.050211 27344 master.cpp:527] Allocator timer tick
I1229 15:50:37.050480 27344 simple_allocator.cpp:148] Running makeNewOffers...
I1229 15:50:38.059840 27344 master.cpp:527] Allocator timer tick
...

h2. Running the Slave

# type `./mesos-slave` without arguments to see the required and optional arguments
# You should be able to see the slave show up on the master's webui


h2. Configure Mesos settings

 * Mesos configuration settings can be set via:
 ** Environment variables
 ** Command line arguments
 ** A text file

 * Configuration can be used to specify:
 ** log file locations
 ** master and slave daemon port numbers (for communicating with each other)
 ** master and slave webui port numbers


h2. Start a Framework

# There should be a readme in each framework directory that explains how to use that framework
# You will have to have run `./configure` with the correct parameters to use frameworks written in languages other than C/C++, e.g. --with-java-home=...
## See the "README.swig":https://github.com/mesosproject/mesos/blob/master/README.swig file for more information about this

Example:

pre. ./test-framework 1@127.0.1.1:53511
./test-framework local  #A framework can also be run without a dedicated master
                        #by passing it the "local" flag instead of the master PID

h2. Logging Information

 * Mesos uses "Google Log":http://code.google.com/p/google-glog and writes logs to /tmp by default
 * Mesos also writes the stdout for master and slave to the NEXUS_HOME/work directory
 * 

h2. Developing using "local" 

To ease framework development, instead of running a master plus a slave daemon and then hunting down stdout, stderr, etc. you can simply run your framework scheduler passing it "local" or "localquiet".