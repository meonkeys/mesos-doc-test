h1. Mesos Documentation

For now, you can run Mesos in Linux, Solaris, or OS X.

h2. Configure Mesos settings

 * Mesos configuration settings can be set via:
 ** Environment variables
 ** Command line arguments
 ** A text file

 * Configuration can be used to specify:
 ** log file locations
 ** master and slave daemon port numbers (for communicating with each other)
 ** master and slave webui port numbers

h2. Prerequisites

* Python 2.6 (Only using Web UI uses python bottle package)
* g++ 4.1 or higher
* SWIG 1.3.40 or higher
* Does not build on Windows

h2. Getting Mesos

The alpha release of mesos is available via github at github http://github.com/mesos/mesos.git

h2. Building Mesos

Mesos uses the standard GNU set of build tools for C++.

h3. Configuring mesos
## In linux or solaris, in the `NEXUS_HOME` directory, if you are using a 64bit ubuntu VM, type `./configure.OURS.ubuntu64`
## our premade config commands require you to have python-dev, ruby-dev, sun-java6-jdk, and swig (to get these in ubuntu, type apt-get X, where X is those three things in turn)
# Type `make`

h2. Running the Master

h3. Fault Tolerant Mesos (using Zookeeper)
# Make sure Zookeeper is running
# 

h4. Non Fault-Tolerant Mesos
#  type `./mesos-master`. See the sample output below. 
# take note of the libprocess PID identifier that is printed to stdout (or the log file if you have redirected log output), it will be something like: `1@127.0.1.1:41210`
# access the webui at `http://[ip addr of master]:8080`

pre. ubuntu:~/mesos/src$ ./mesos-master 
I1229 15:50:36.042454 27343 master_main.cpp:51] Build: 2009-12-29 15:35:23 by andyk
I1229 15:50:36.043526 27343 master_main.cpp:52] Starting Mesos master
I1229 15:50:36.044958 27344 master.cpp:228] Master started at 1@127.0.1.1:41210
I1229 15:50:36.045361 27343 master_webui.cpp:42] Starting master web UI
I1229 15:50:36.046046 27346 master_webui.cpp:25] Web UI thread started
I1229 15:50:36.105986 27346 master_webui.cpp:32] Loading webui/master/webui.py
Bottle server starting up (using WSGIRefServer (0.0.0.0:8080))...
Listening on http://0.0.0.0:8080/
Use Ctrl-C to quit.
I1229 15:50:37.050211 27344 master.cpp:527] Allocator timer tick
I1229 15:50:37.050480 27344 simple_allocator.cpp:148] Running makeNewOffers...
I1229 15:50:38.059840 27344 master.cpp:527] Allocator timer tick
...

h2. Running the Slave

# type `./mesos-slave` without arguments to see the required and optional arguments
# You should be able to see the slave show up on the master's webui

h2. Start a Framework

# There should be a readme in each framework directory that explains how to use that framework
# You will have to have run `./configure` with the correct parameters to use frameworks written in languages other than C/C++, e.g. --with-java-home=...
## See the "README.swig":https://github.com/mesosproject/mesos/blob/master/README.swig file for more information about this

Example:

pre. ./test-framework 1@127.0.1.1:53511
./test-framework local  #A framework can also be run without a dedicated master
                        #by passing it the "local" flag instead of the master PID

h2. Logging Information

 * Mesos uses "Google Log":http://code.google.com/p/google-glog and writes logs to /tmp by default
 * Mesos also writes the stdout for master and slave to the NEXUS_HOME/work directory
 * 

h2. Unit Tests

Mesos uses "GoogleTest":http://code.google.com/p/googletest/. The tests are located in src/tests. They get built into a binary called alltests, which you can run to execute them. You can also run alltests -v to see log output on stderr (normally it only gets placed in a log file in /tmp)

h2. Developing using "local" 

To ease framework development, instead of running a master plus a slave daemon and then hunting down stdout, stderr, etc. you can simply run your framework scheduler passing it "local" or "localquiet".